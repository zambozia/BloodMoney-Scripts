//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Fantacode Studios Backup/Third Person Controller/InputAction/LocomotionInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
#if inputsystem
using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;
namespace FS_ThirdPerson
{
    public partial class @LocomotionInputAction : IInputActionCollection2, IDisposable
    {
        public InputActionAsset asset { get; }
        public @LocomotionInputAction()
        {
            asset = InputActionAsset.FromJson(@"{
    ""name"": ""LocomotionInputAction"",
    ""maps"": [
        {
            ""name"": ""Locomotion"",
            ""id"": ""f767e5ae-415f-4ad2-9fb8-483c0f871d86"",
            ""actions"": [
                {
                    ""name"": ""MoveInput"",
                    ""type"": ""Value"",
                    ""id"": ""4794dddc-04ec-495a-91d6-ad392e23fd41"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""2c8480d8-c6ca-4663-9f4c-4dd66159e1c7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Drop"",
                    ""type"": ""Button"",
                    ""id"": ""dd251ed4-d36c-44c1-863e-91251e99e45d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MoveType"",
                    ""type"": ""Button"",
                    ""id"": ""de000ec5-f246-40c6-a8b1-6daabb1ea275"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SprintKey"",
                    ""type"": ""Button"",
                    ""id"": ""e7eb017d-b5cb-4759-b104-c58d1d9f1904"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CameraInput"",
                    ""type"": ""Value"",
                    ""id"": ""1199d803-a291-484b-b627-399c655a5813"",
                    ""expectedControlType"": ""Delta"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Interaction"",
                    ""type"": ""Button"",
                    ""id"": ""2ff8ab4b-eaff-43f1-a811-98d846924b25"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""22144bee-0253-4a90-860c-0bb9aff08a67"",
                    ""path"": ""2DVector(mode=1)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Up"",
                    ""id"": ""2a47c1c1-bcd5-4f6c-9e91-4f4b033ecfe8"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Down"",
                    ""id"": ""e6235f27-3493-4513-a84d-4312abffd29a"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Left"",
                    ""id"": ""2a1f430e-80e1-4766-9eba-d476af5ddf04"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""Right"",
                    ""id"": ""dc4e5ce2-0217-4d18-973f-5208be8411a6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""ae016b43-345c-46c8-934d-2463541430a8"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99bcbf85-9a33-4dda-987e-92ca243bfd79"",
                    ""path"": ""<Gamepad>/rightStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6cf28503-4698-4aa1-a115-edba8fcf1d1f"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CameraInput"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b598355e-492b-4f28-8bce-f43d5cbf94e3"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""eca115ff-2bf9-4106-83d7-2db5e7491a18"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SprintKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7ac1e0e1-d554-4266-bd18-b59392995cc2"",
                    ""path"": ""<Keyboard>/tab"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d5a1b0e2-b3d9-4027-8302-192b2792e4c1"",
                    ""path"": ""<Gamepad>/leftShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveType"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""63bc2e7d-7993-4dcd-a21a-42c75f978b69"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""97825d22-56db-4dd5-9ef4-bda2b15800eb"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Drop"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8a0a1d15-a8ef-47ac-9925-230913699f50"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0331fb4a-8f15-4826-ba04-c98a54aa2c06"",
                    ""path"": ""<Gamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""77e2a6b8-ac04-408b-a694-475eeec205f6"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c9f28d73-c069-4f69-8a15-6afcb643fcf9"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Interaction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
            // Locomotion
            m_Locomotion = asset.FindActionMap("Locomotion", throwIfNotFound: true);
            m_Locomotion_MoveInput = m_Locomotion.FindAction("MoveInput", throwIfNotFound: true);
            m_Locomotion_Jump = m_Locomotion.FindAction("Jump", throwIfNotFound: true);
            m_Locomotion_Drop = m_Locomotion.FindAction("Drop", throwIfNotFound: true);
            m_Locomotion_MoveType = m_Locomotion.FindAction("MoveType", throwIfNotFound: true);
            m_Locomotion_SprintKey = m_Locomotion.FindAction("SprintKey", throwIfNotFound: true);
            m_Locomotion_CameraInput = m_Locomotion.FindAction("CameraInput", throwIfNotFound: true);
            m_Locomotion_Interaction = m_Locomotion.FindAction("Interaction", throwIfNotFound: true);
        }

        public void Dispose()
        {
            UnityEngine.Object.Destroy(asset);
        }

        public InputBinding? bindingMask
        {
            get => asset.bindingMask;
            set => asset.bindingMask = value;
        }

        public ReadOnlyArray<InputDevice>? devices
        {
            get => asset.devices;
            set => asset.devices = value;
        }

        public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

        public bool Contains(InputAction action)
        {
            return asset.Contains(action);
        }

        public IEnumerator<InputAction> GetEnumerator()
        {
            return asset.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Enable()
        {
            asset.Enable();
        }

        public void Disable()
        {
            asset.Disable();
        }

        public IEnumerable<InputBinding> bindings => asset.bindings;

        public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
        {
            return asset.FindAction(actionNameOrId, throwIfNotFound);
        }

        public int FindBinding(InputBinding bindingMask, out InputAction action)
        {
            return asset.FindBinding(bindingMask, out action);
        }

        // Locomotion
        private readonly InputActionMap m_Locomotion;
        private List<ILocomotionActions> m_LocomotionActionsCallbackInterfaces = new List<ILocomotionActions>();
        private readonly InputAction m_Locomotion_MoveInput;
        private readonly InputAction m_Locomotion_Jump;
        private readonly InputAction m_Locomotion_Drop;
        private readonly InputAction m_Locomotion_MoveType;
        private readonly InputAction m_Locomotion_SprintKey;
        private readonly InputAction m_Locomotion_CameraInput;
        private readonly InputAction m_Locomotion_Interaction;
        public struct LocomotionActions
        {
            private @LocomotionInputAction m_Wrapper;
            public LocomotionActions(@LocomotionInputAction wrapper) { m_Wrapper = wrapper; }
            public InputAction @MoveInput => m_Wrapper.m_Locomotion_MoveInput;
            public InputAction @Jump => m_Wrapper.m_Locomotion_Jump;
            public InputAction @Drop => m_Wrapper.m_Locomotion_Drop;
            public InputAction @MoveType => m_Wrapper.m_Locomotion_MoveType;
            public InputAction @SprintKey => m_Wrapper.m_Locomotion_SprintKey;
            public InputAction @CameraInput => m_Wrapper.m_Locomotion_CameraInput;
            public InputAction @Interaction => m_Wrapper.m_Locomotion_Interaction;
            public InputActionMap Get() { return m_Wrapper.m_Locomotion; }
            public void Enable() { Get().Enable(); }
            public void Disable() { Get().Disable(); }
            public bool enabled => Get().enabled;
            public static implicit operator InputActionMap(LocomotionActions set) { return set.Get(); }
            public void AddCallbacks(ILocomotionActions instance)
            {
                if (instance == null || m_Wrapper.m_LocomotionActionsCallbackInterfaces.Contains(instance)) return;
                m_Wrapper.m_LocomotionActionsCallbackInterfaces.Add(instance);
                @MoveInput.started += instance.OnMoveInput;
                @MoveInput.performed += instance.OnMoveInput;
                @MoveInput.canceled += instance.OnMoveInput;
                @Jump.started += instance.OnJump;
                @Jump.performed += instance.OnJump;
                @Jump.canceled += instance.OnJump;
                @Drop.started += instance.OnDrop;
                @Drop.performed += instance.OnDrop;
                @Drop.canceled += instance.OnDrop;
                @MoveType.started += instance.OnMoveType;
                @MoveType.performed += instance.OnMoveType;
                @MoveType.canceled += instance.OnMoveType;
                @SprintKey.started += instance.OnSprintKey;
                @SprintKey.performed += instance.OnSprintKey;
                @SprintKey.canceled += instance.OnSprintKey;
                @CameraInput.started += instance.OnCameraInput;
                @CameraInput.performed += instance.OnCameraInput;
                @CameraInput.canceled += instance.OnCameraInput;
                @Interaction.started += instance.OnInteraction;
                @Interaction.performed += instance.OnInteraction;
                @Interaction.canceled += instance.OnInteraction;
            }

            private void UnregisterCallbacks(ILocomotionActions instance)
            {
                @MoveInput.started -= instance.OnMoveInput;
                @MoveInput.performed -= instance.OnMoveInput;
                @MoveInput.canceled -= instance.OnMoveInput;
                @Jump.started -= instance.OnJump;
                @Jump.performed -= instance.OnJump;
                @Jump.canceled -= instance.OnJump;
                @Drop.started -= instance.OnDrop;
                @Drop.performed -= instance.OnDrop;
                @Drop.canceled -= instance.OnDrop;
                @MoveType.started -= instance.OnMoveType;
                @MoveType.performed -= instance.OnMoveType;
                @MoveType.canceled -= instance.OnMoveType;
                @SprintKey.started -= instance.OnSprintKey;
                @SprintKey.performed -= instance.OnSprintKey;
                @SprintKey.canceled -= instance.OnSprintKey;
                @CameraInput.started -= instance.OnCameraInput;
                @CameraInput.performed -= instance.OnCameraInput;
                @CameraInput.canceled -= instance.OnCameraInput;
                @Interaction.started -= instance.OnInteraction;
                @Interaction.performed -= instance.OnInteraction;
                @Interaction.canceled -= instance.OnInteraction;
            }

            public void RemoveCallbacks(ILocomotionActions instance)
            {
                if (m_Wrapper.m_LocomotionActionsCallbackInterfaces.Remove(instance))
                    UnregisterCallbacks(instance);
            }

            public void SetCallbacks(ILocomotionActions instance)
            {
                foreach (var item in m_Wrapper.m_LocomotionActionsCallbackInterfaces)
                    UnregisterCallbacks(item);
                m_Wrapper.m_LocomotionActionsCallbackInterfaces.Clear();
                AddCallbacks(instance);
            }
        }
        public LocomotionActions @Locomotion => new LocomotionActions(this);
        public interface ILocomotionActions
        {
            void OnMoveInput(InputAction.CallbackContext context);
            void OnJump(InputAction.CallbackContext context);
            void OnDrop(InputAction.CallbackContext context);
            void OnMoveType(InputAction.CallbackContext context);
            void OnSprintKey(InputAction.CallbackContext context);
            void OnCameraInput(InputAction.CallbackContext context);
            void OnInteraction(InputAction.CallbackContext context);
        }
    }
}
#endif